

HI-TECH Software PIC LITE Macro Assembler V9.82 build 9453 
                                                                                               Thu Apr 19 09:09:32 2012

HI-TECH Software Omniscient Code Generator (Lite mode) build 9453
     1  0000                     opt subtitle "HI-TECH Software Omniscient Code Generator (Lite mode) build 9453"
     2                           
     3                           opt pagewidth 120
     4                           
     5                           	opt lm
     6                           
     7                           	processor	16F88
     8                           clrc	macro
     9                           	bcf	3,0
    10  0000                     	endm
    11                           clrz	macro
    12                           	bcf	3,2
    13  0000                     	endm
    14                           setc	macro
    15                           	bsf	3,0
    16  0000                     	endm
    17                           setz	macro
    18                           	bsf	3,2
    19  0000                     	endm
    20                           skipc	macro
    21                           	btfss	3,0
    22  0000                     	endm
    23                           skipz	macro
    24                           	btfss	3,2
    25  0000                     	endm
    26                           skipnc	macro
    27                           	btfsc	3,0
    28  0000                     	endm
    29                           skipnz	macro
    30                           	btfsc	3,2
    31  0000                     	endm
    32  0000                     indf	equ	0
    33  0000                     indf0	equ	0
    34  0002                     pc	equ	2
    35  0002                     pcl	equ	2
    36  0003                     status	equ	3
    37  0004                     fsr	equ	4
    38  0004                     fsr0	equ	4
    39  0001                     c	equ	1
    40  0000                     z	equ	0
    41  000A                     pclath	equ	10
    42                           # 14 "Main.c"
    43                           	psect config,class=CONFIG,delta=2 ;#
    44                           # 14 "Main.c"
    45  2007  FF0A               	dw 0xFFFF & 0xFFFF & 0xFFFF & 0xFFFF & 0xFFFF & 0xFF7F & 0xFFBF & 0xFFDF & 0xFFFF & 0xF
                                 FFB & 0xFFEE ;#
    46                           # 15 "Main.c"
    47                           	psect config,class=CONFIG,delta=2 ;#
    48                           # 15 "Main.c"
    49  2008  FFFC               	dw 0xFFFD & 0xFFFE ;#
    50                           	FNCALL	_main,_Init_Hardware
    51                           	FNROOT	_main
    52                           	FNCALL	intlevel1,_isr
    53                           	global	intlevel1
    54                           	FNROOT	intlevel1
    55                           	global	_byte
    56                           	global	isr@bit_count
    57                           	global	isr@count
    58                           	global	isr@dcd
    59                           	global	isr@last8bits
    60                           	global	isr@next_sample
    61                           	global	isr@ones_count
    62                           	global	isr@sample_clock
    63                           	global	_busy
    64                           	global	isr@last
    65                           	global	isr@rxtoggled
    66                           	global	_INTCON
    67                           psect	text76,local,class=CODE,delta=2
    68                           global __ptext76
    69  0000                     __ptext76:
    70  000B                     _INTCON	set	11
    71                           	global	_PORTA
    72  0005                     _PORTA	set	5
    73                           	global	_PORTB
    74  0006                     _PORTB	set	6
    75                           	global	_RCSTA
    76  0018                     _RCSTA	set	24
    77                           	global	_T1CON
    78  0010                     _T1CON	set	16
    79                           	global	_T2CON
    80  0012                     _T2CON	set	18
    81                           	global	_TMR0
    82  0001                     _TMR0	set	1
    83                           	global	_TMR2
    84  0011                     _TMR2	set	17
    85                           	global	_TXREG
    86  0019                     _TXREG	set	25
    87                           	global	_CARRY
    88  0018                     _CARRY	set	24
    89                           	global	_GIE
    90  005F                     _GIE	set	95
    91                           	global	_RA4
    92  002C                     _RA4	set	44
    93                           	global	_RBIF
    94  0058                     _RBIF	set	88
    95                           	global	_TMR2IF
    96  0061                     _TMR2IF	set	97
    97                           	global	_ANSEL
    98  009B                     _ANSEL	set	155
    99                           	global	_CMCON
   100  009C                     _CMCON	set	156
   101                           	global	_OPTION_REG
   102  0081                     _OPTION_REG	set	129
   103                           	global	_PIE1
   104  008C                     _PIE1	set	140
   105                           	global	_PIE2
   106  008D                     _PIE2	set	141
   107                           	global	_SPBRG
   108  0099                     _SPBRG	set	153
   109                           	global	_TRISA
   110  0085                     _TRISA	set	133
   111                           	global	_TRISB
   112  0086                     _TRISB	set	134
   113                           	global	_TXSTA
   114  0098                     _TXSTA	set	152
   115                           	global	_EEADR
   116  010D                     _EEADR	set	269
   117                           	global	_EEDATA
   118  010C                     _EEDATA	set	268
   119                           	global	_EECON1
   120  018C                     _EECON1	set	396
   121                           	global	_EECON2
   122  018D                     _EECON2	set	397
   123                           	global	_RD
   124  0C60                     _RD	set	3168
   125                           	global	_WR
   126  0C61                     _WR	set	3169
   127                           	global	_WREN
   128  0C62                     _WREN	set	3170
   129                           	file	"/tmp/cgtgAQdqR"
   130                           	line	#
   131                           psect cinit,class=CODE,delta=2
   132                           global start_initialization
   133  00D9                     start_initialization:
   134                           
   135                           psect	bitbssCOMMON,class=COMMON,bit,space=1
   136                           global __pbitbssCOMMON
   137  03E8                     __pbitbssCOMMON:
   138  03E8                     _busy:
   139  03E8                            ds      1
   140                           
   141  03E9                     isr@last:
   142  03E9                            ds      1
   143                           
   144  03EA                     isr@rxtoggled:
   145  03EA                            ds      1
   146                           
   147                           psect	bssCOMMON,class=COMMON,space=1
   148                           global __pbssCOMMON
   149  0070                     __pbssCOMMON:
   150  0070                     _byte:
   151  0070                            ds      1
   152                           
   153  0071                     isr@bit_count:
   154  0071                            ds      1
   155                           
   156  0072                     isr@count:
   157  0072                            ds      1
   158                           
   159  0073                     isr@dcd:
   160  0073                            ds      1
   161                           
   162  0074                     isr@last8bits:
   163  0074                            ds      1
   164                           
   165  0075                     isr@next_sample:
   166  0075                            ds      1
   167                           
   168  0076                     isr@ones_count:
   169  0076                            ds      1
   170                           
   171  0077                     isr@sample_clock:
   172  0077                            ds      1
   173                           
   174                           ; Clear objects allocated to BITCOMMON
   175                           psect cinit,class=CODE,delta=2
   176  00D9  01FD               	clrf	((__pbitbssCOMMON/8)+0)&07Fh
   177                           ; Clear objects allocated to COMMON
   178                           psect cinit,class=CODE,delta=2
   179  00DA  01F0               	clrf	((__pbssCOMMON)+0)&07Fh
   180  00DB  01F1               	clrf	((__pbssCOMMON)+1)&07Fh
   181  00DC  01F2               	clrf	((__pbssCOMMON)+2)&07Fh
   182  00DD  01F3               	clrf	((__pbssCOMMON)+3)&07Fh
   183  00DE  01F4               	clrf	((__pbssCOMMON)+4)&07Fh
   184  00DF  01F5               	clrf	((__pbssCOMMON)+5)&07Fh
   185  00E0  01F6               	clrf	((__pbssCOMMON)+6)&07Fh
   186  00E1  01F7               	clrf	((__pbssCOMMON)+7)&07Fh
   187                           psect cinit,class=CODE,delta=2
   188                           global end_of_initialization
   189                           
   190                           ;End of C runtime variable initialization code
   191                           
   192  00E2                     end_of_initialization:
   193  00E2  0183               clrf status
   194  00E3  118A  28E5         ljmp _main	;jump to C main() function
   195                           psect	cstackCOMMON,class=COMMON,space=1
   196                           global __pcstackCOMMON
   197  0078                     __pcstackCOMMON:
   198                           	global	?_Init_Hardware
   199  0078                     ?_Init_Hardware:	; 0 bytes @ 0x0
   200                           	global	?_isr
   201  0078                     ?_isr:	; 0 bytes @ 0x0
   202                           	global	??_isr
   203  0078                     ??_isr:	; 0 bytes @ 0x0
   204                           	global	?_main
   205  0078                     ?_main:	; 2 bytes @ 0x0
   206  0078                     	ds	5
   207                           	global	??_Init_Hardware
   208  007D                     ??_Init_Hardware:	; 0 bytes @ 0x5
   209                           	global	??_main
   210  007D                     ??_main:	; 0 bytes @ 0x5
   211 ;;Data sizes: Strings 0, constant 0, data 0, bss 8, persistent 0 stack 0
   212 ;;Auto spaces:   Size  Autos    Used
   213 ;; COMMON          14      5      14
   214 ;; BANK0           80      0       0
   215 ;; BANK1           80      0       0
   216 ;; BANK3           96      0       0
   217 ;; BANK2           96      0       0
   218                           
   219 ;;
   220 ;; Pointer list with targets:
   221                           
   222                           
   223                           
   224 ;;
   225 ;; Critical Paths under _main in COMMON
   226 ;;
   227 ;;   None.
   228 ;;
   229 ;; Critical Paths under _isr in COMMON
   230 ;;
   231 ;;   None.
   232 ;;
   233 ;; Critical Paths under _main in BANK0
   234 ;;
   235 ;;   None.
   236 ;;
   237 ;; Critical Paths under _isr in BANK0
   238 ;;
   239 ;;   None.
   240 ;;
   241 ;; Critical Paths under _main in BANK1
   242 ;;
   243 ;;   None.
   244 ;;
   245 ;; Critical Paths under _isr in BANK1
   246 ;;
   247 ;;   None.
   248 ;;
   249 ;; Critical Paths under _main in BANK3
   250 ;;
   251 ;;   None.
   252 ;;
   253 ;; Critical Paths under _isr in BANK3
   254 ;;
   255 ;;   None.
   256 ;;
   257 ;; Critical Paths under _main in BANK2
   258 ;;
   259 ;;   None.
   260 ;;
   261 ;; Critical Paths under _isr in BANK2
   262 ;;
   263 ;;   None.
   264                           
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   267 ;;
   268                           
   269 ;;
   270 ;;Call Graph Tables:
   271 ;;
   272 ;; ---------------------------------------------------------------------------------
   273 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   274 ;; ---------------------------------------------------------------------------------
   275 ;; (0) _main                                                 0     0      0       0
   276 ;;                      _Init_Hardware
   277 ;; ---------------------------------------------------------------------------------
   278 ;; (1) _Init_Hardware                                        0     0      0       0
   279 ;; ---------------------------------------------------------------------------------
   280 ;; Estimated maximum stack depth 1
   281 ;; ---------------------------------------------------------------------------------
   282 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   283 ;; ---------------------------------------------------------------------------------
   284 ;; (2) _isr                                                  5     5      0       0
   285 ;;                                              0 COMMON     5     5      0
   286 ;; ---------------------------------------------------------------------------------
   287 ;; Estimated maximum stack depth 2
   288 ;; ---------------------------------------------------------------------------------
   289                           
   290 ;; Call Graph Graphs:
   291                           
   292 ;; _main (ROOT)
   293 ;;   _Init_Hardware
   294 ;;
   295 ;; _isr (ROOT)
   296 ;;
   297                           
   298 ;; Address spaces:
   299                           
   300 ;;Name               Size   Autos  Total    Cost      Usage
   301 ;;BITCOMMON            E      0       1       0        7.1%
   302 ;;EEDATA             100      0       0       0        0.0%
   303 ;;NULL                 0      0       0       0        0.0%
   304 ;;CODE                 0      0       0       0        0.0%
   305 ;;COMMON               E      5       E       1      100.0%
   306 ;;BITSFR0              0      0       0       1        0.0%
   307 ;;SFR0                 0      0       0       1        0.0%
   308 ;;BITSFR1              0      0       0       2        0.0%
   309 ;;SFR1                 0      0       0       2        0.0%
   310 ;;STACK                0      0       1       2        0.0%
   311 ;;ABS                  0      0       E       3        0.0%
   312 ;;BITBANK0            50      0       0       4        0.0%
   313 ;;BITSFR3              0      0       0       4        0.0%
   314 ;;SFR3                 0      0       0       4        0.0%
   315 ;;BANK0               50      0       0       5        0.0%
   316 ;;BITSFR2              0      0       0       5        0.0%
   317 ;;SFR2                 0      0       0       5        0.0%
   318 ;;BITBANK1            50      0       0       6        0.0%
   319 ;;BANK1               50      0       0       7        0.0%
   320 ;;BITBANK3            60      0       0       8        0.0%
   321 ;;BANK3               60      0       0       9        0.0%
   322 ;;BITBANK2            60      0       0      10        0.0%
   323 ;;BANK2               60      0       0      11        0.0%
   324 ;;DATA                 0      0       F      12        0.0%
   325                           
   326                           	global	_main
   327                           psect	maintext,global,class=CODE,delta=2
   328                           global __pmaintext
   329  00E5                     __pmaintext:
   330                           
   331 ;; *************** function _main *****************
   332 ;; Defined at:
   333 ;;		line 130 in file "Main.c"
   334 ;; Parameters:    Size  Location     Type
   335 ;;		None
   336 ;; Auto vars:     Size  Location     Type
   337 ;;		None
   338 ;; Return value:  Size  Location     Type
   339 ;;                  2  645[COMMON] int 
   340 ;; Registers used:
   341 ;;		wreg, status,2, status,0, pclath, cstack
   342 ;; Tracked objects:
   343 ;;		On entry : 17F/0
   344 ;;		On exit  : 0/0
   345 ;;		Unchanged: 0/0
   346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   347 ;;      Params:         0       0       0       0       0
   348 ;;      Locals:         0       0       0       0       0
   349 ;;      Temps:          0       0       0       0       0
   350 ;;      Totals:         0       0       0       0       0
   351 ;;Total ram usage:        0 bytes
   352 ;; Hardware stack levels required when called:    2
   353 ;; This function calls:
   354 ;;		_Init_Hardware
   355 ;; This function is called by:
   356 ;;		Startup code after reset
   357 ;; This function uses a non-reentrant model
   358 ;;
   359                           psect	maintext
   360                           	file	"Main.c"
   361                           	line	130
   362                           	global	__size_of_main
   363  0007                     	__size_of_main	equ	__end_of_main-_main
   364                           	
   365  00E5                     _main:	
   366                           	opt	stack 6
   367                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   368                           	line	131
   369                           	
   370  00E5                     l2560:	
   371                           ;Main.c: 131: Init_Hardware();
   372  00E5  118A  20AE  118A   	fcall	_Init_Hardware
   373  00E8  28E9               	goto	l647
   374                           	line	132
   375                           ;Main.c: 132: while (1);
   376                           	
   377  00E9                     l646:	
   378                           	
   379  00E9                     l647:	
   380  00E9  28E9               	goto	l647
   381                           	
   382  00EA                     l648:	
   383                           	line	133
   384                           	
   385  00EA                     l649:	
   386                           	global	start
   387  00EA  118A  2811         	ljmp	start
   388                           	opt stack 0
   389                           GLOBAL	__end_of_main
   390  00EC                     	__end_of_main:
   391 ;; =============== function _main ends ============
   392                           
   393                           	signat	_main,90
   394                           	global	_Init_Hardware
   395                           psect	text77,local,class=CODE,delta=2
   396                           global __ptext77
   397  00AE                     __ptext77:
   398                           
   399 ;; *************** function _Init_Hardware *****************
   400 ;; Defined at:
   401 ;;		line 20 in file "Main.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;		None
   404 ;; Auto vars:     Size  Location     Type
   405 ;;		None
   406 ;; Return value:  Size  Location     Type
   407 ;;		None               void
   408 ;; Registers used:
   409 ;;		wreg, status,2
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   415 ;;      Params:         0       0       0       0       0
   416 ;;      Locals:         0       0       0       0       0
   417 ;;      Temps:          0       0       0       0       0
   418 ;;      Totals:         0       0       0       0       0
   419 ;;Total ram usage:        0 bytes
   420 ;; Hardware stack levels used:    1
   421 ;; Hardware stack levels required when called:    1
   422 ;; This function calls:
   423 ;;		Nothing
   424 ;; This function is called by:
   425 ;;		_main
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           psect	text77
   429                           	file	"Main.c"
   430                           	line	20
   431                           	global	__size_of_Init_Hardware
   432  002B                     	__size_of_Init_Hardware	equ	__end_of_Init_Hardware-_Init_Hardware
   433                           	
   434  00AE                     _Init_Hardware:	
   435                           	opt	stack 6
   436                           ; Regs used in _Init_Hardware: [wreg+status,2]
   437                           	line	21
   438                           	
   439  00AE                     l1620:	
   440                           ;Main.c: 21: INTCON = 0b11001000;
   441  00AE  30C8               	movlw	(0C8h)
   442  00AF  008B               	movwf	(11)	;volatile
   443                           	line	22
   444                           ;Main.c: 22: PIE1 = 0b00000010;
   445  00B0  3002               	movlw	(02h)
   446  00B1  1683               	bsf	status, 5	;RP0=1, select bank1
   447  00B2  1303               	bcf	status, 6	;RP1=0, select bank1
   448  00B3  008C               	movwf	(140)^080h	;volatile
   449                           	line	23
   450                           ;Main.c: 23: PIE2 = 0b01000000;
   451  00B4  3040               	movlw	(040h)
   452  00B5  008D               	movwf	(141)^080h	;volatile
   453                           	line	24
   454                           ;Main.c: 24: OPTION_REG = 0b10000100;
   455  00B6  3084               	movlw	(084h)
   456  00B7  0081               	movwf	(129)^080h	;volatile
   457                           	line	25
   458                           ;Main.c: 25: T1CON = 0b00110000;
   459  00B8  3030               	movlw	(030h)
   460  00B9  1283               	bcf	status, 5	;RP0=0, select bank0
   461  00BA  1303               	bcf	status, 6	;RP1=0, select bank0
   462  00BB  0090               	movwf	(16)	;volatile
   463                           	line	26
   464                           ;Main.c: 26: T2CON = 0b00000101;
   465  00BC  3005               	movlw	(05h)
   466  00BD  0092               	movwf	(18)	;volatile
   467                           	line	27
   468                           ;Main.c: 27: CMCON = 0b00000110;
   469  00BE  3006               	movlw	(06h)
   470  00BF  1683               	bsf	status, 5	;RP0=1, select bank1
   471  00C0  1303               	bcf	status, 6	;RP1=0, select bank1
   472  00C1  009C               	movwf	(156)^080h	;volatile
   473                           	line	28
   474                           ;Main.c: 28: ANSEL = 0b00011111;
   475  00C2  301F               	movlw	(01Fh)
   476  00C3  009B               	movwf	(155)^080h	;volatile
   477                           	line	29
   478                           ;Main.c: 29: TRISA = 0b11110111;
   479  00C4  30F7               	movlw	(0F7h)
   480  00C5  0085               	movwf	(133)^080h	;volatile
   481                           	line	30
   482                           ;Main.c: 30: TRISB = 0b00110100;
   483  00C6  3034               	movlw	(034h)
   484  00C7  0086               	movwf	(134)^080h	;volatile
   485                           	line	31
   486                           	
   487  00C8                     l1622:	
   488                           ;Main.c: 31: PORTA = 0b00000000;
   489  00C8  1283               	bcf	status, 5	;RP0=0, select bank0
   490  00C9  1303               	bcf	status, 6	;RP1=0, select bank0
   491  00CA  0185               	clrf	(5)	;volatile
   492                           	line	32
   493                           	
   494  00CB                     l1624:	
   495                           ;Main.c: 32: PORTB = 0b00000000;
   496  00CB  0186               	clrf	(6)	;volatile
   497                           	line	33
   498                           ;Main.c: 33: RCSTA = 0b10100000;
   499  00CC  30A0               	movlw	(0A0h)
   500  00CD  0098               	movwf	(24)	;volatile
   501                           	line	34
   502                           ;Main.c: 34: TXSTA = 0b00100100;
   503  00CE  3024               	movlw	(024h)
   504  00CF  1683               	bsf	status, 5	;RP0=1, select bank1
   505  00D0  1303               	bcf	status, 6	;RP1=0, select bank1
   506  00D1  0098               	movwf	(152)^080h	;volatile
   507                           	line	35
   508                           ;Main.c: 35: SPBRG = 129;
   509  00D2  3081               	movlw	(081h)
   510  00D3  0099               	movwf	(153)^080h	;volatile
   511                           	line	36
   512                           ;Main.c: 36: TMR2 = 126;
   513  00D4  307E               	movlw	(07Eh)
   514  00D5  1283               	bcf	status, 5	;RP0=0, select bank0
   515  00D6  1303               	bcf	status, 6	;RP1=0, select bank0
   516  00D7  0091               	movwf	(17)	;volatile
   517                           	line	37
   518                           	
   519  00D8                     l605:	
   520  00D8  0008               	return
   521                           	opt stack 0
   522                           GLOBAL	__end_of_Init_Hardware
   523  00D9                     	__end_of_Init_Hardware:
   524 ;; =============== function _Init_Hardware ends ============
   525                           
   526                           	signat	_Init_Hardware,88
   527                           	global	_isr
   528                           psect	text78,local,class=CODE,delta=2
   529                           global __ptext78
   530  0013                     __ptext78:
   531                           
   532 ;; *************** function _isr *****************
   533 ;; Defined at:
   534 ;;		line 39 in file "Main.c"
   535 ;; Parameters:    Size  Location     Type
   536 ;;		None
   537 ;; Auto vars:     Size  Location     Type
   538 ;;		None
   539 ;; Return value:  Size  Location     Type
   540 ;;		None               void
   541 ;; Registers used:
   542 ;;		wreg, status,2, status,0
   543 ;; Tracked objects:
   544 ;;		On entry : 0/0
   545 ;;		On exit  : 0/0
   546 ;;		Unchanged: 0/0
   547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   548 ;;      Params:         0       0       0       0       0
   549 ;;      Locals:         0       0       0       0       0
   550 ;;      Temps:          5       0       0       0       0
   551 ;;      Totals:         5       0       0       0       0
   552 ;;Total ram usage:        5 bytes
   553 ;; Hardware stack levels used:    1
   554 ;; This function calls:
   555 ;;		Nothing
   556 ;; This function is called by:
   557 ;;		Interrupt level 1
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           psect	text78
   561                           	file	"Main.c"
   562                           	line	39
   563                           	global	__size_of_isr
   564  009B                     	__size_of_isr	equ	__end_of_isr-_isr
   565                           	
   566  0013                     _isr:	
   567                           	opt	stack 6
   568                           ; Regs used in _isr: [wreg+status,2+status,0]
   569                           psect	intentry,class=CODE,delta=2
   570                           global __pintentry
   571  0004                     __pintentry:
   572                           global interrupt_function
   573  0004                     interrupt_function:
   574                           	global saved_w
   575  007E                     	saved_w	set	btemp+0
   576  0004  00FE               	movwf	saved_w
   577  0005  0E03               	swapf	status,w
   578  0006  00F9               	movwf	(??_isr+1)
   579  0007  0804               	movf	fsr0,w
   580  0008  00FA               	movwf	(??_isr+2)
   581  0009  080A               	movf	pclath,w
   582  000A  00FB               	movwf	(??_isr+3)
   583  000B  1283               	bcf	status, 5	;RP0=0, select bank0
   584  000C  1303               	bcf	status, 6	;RP1=0, select bank0
   585  000D  087F               	movf	btemp+1,w
   586  000E  00FC               	movwf	(??_isr+4)
   587  000F  118A  2813         	ljmp	_isr
   588                           psect	text78
   589                           	line	50
   590                           	
   591  0013                     i1l1626:	
   592                           ;Main.c: 40: static char count;
   593                           ;Main.c: 41: static bit last;
   594                           ;Main.c: 42: static bit rxtoggled;
   595                           ;Main.c: 43: static char last8bits;
   596                           ;Main.c: 44: static char bit_count;
   597                           ;Main.c: 45: static char dcd;
   598                           ;Main.c: 46: static char sample_clock;
   599                           ;Main.c: 47: static char next_sample;
   600                           ;Main.c: 48: static char ones_count;
   601                           ;Main.c: 50: if (RBIF)
   602  0013  1C0B               	btfss	(88/8),(88)&7
   603  0014  2816               	goto	u1_21
   604  0015  2817               	goto	u1_20
   605  0016                     u1_21:
   606  0016  2842               	goto	i1l626
   607  0017                     u1_20:
   608                           	line	52
   609                           	
   610  0017                     i1l1628:	
   611                           ;Main.c: 51: {
   612                           ;Main.c: 52: count = TMR0;
   613  0017  0801               	movf	(1),w	;volatile
   614  0018  00F8               	movwf	(??_isr+0)+0
   615  0019  0878               	movf	(??_isr+0)+0,w
   616  001A  00F2               	movwf	(isr@count)
   617                           	line	53
   618                           	
   619  001B                     i1l1630:	
   620                           ;Main.c: 53: TMR0 = 0;
   621  001B  0181               	clrf	(1)	;volatile
   622                           	line	54
   623                           	
   624  001C                     i1l1632:	
   625                           ;Main.c: 54: RBIF = 0;
   626  001C  100B               	bcf	(88/8),(88)&7
   627                           	line	55
   628                           	
   629  001D                     i1l1634:	
   630                           ;Main.c: 55: if (count > 92)
   631  001D  305D               	movlw	(05Dh)
   632  001E  0272               	subwf	(isr@count),w
   633  001F  1C03               	skipc
   634  0020  2822               	goto	u2_21
   635  0021  2823               	goto	u2_20
   636  0022                     u2_21:
   637  0022  282F               	goto	i1l1644
   638  0023                     u2_20:
   639                           	line	57
   640                           	
   641  0023                     i1l1636:	
   642                           ;Main.c: 56: {
   643                           ;Main.c: 57: if (last == 0)
   644  0023  18FD               	btfsc	(isr@last/8),(isr@last)&7
   645  0024  2826               	goto	u3_21
   646  0025  2827               	goto	u3_20
   647  0026                     u3_21:
   648  0026  282D               	goto	i1l1642
   649  0027                     u3_20:
   650                           	line	59
   651                           	
   652  0027                     i1l1638:	
   653                           ;Main.c: 58: {
   654                           ;Main.c: 59: rxtoggled = 1;
   655  0027  157D               	bsf	(isr@rxtoggled/8),(isr@rxtoggled)&7
   656                           	line	60
   657                           	
   658  0028                     i1l1640:	
   659                           ;Main.c: 60: dcd = count;
   660  0028  0872               	movf	(isr@count),w
   661  0029  00F8               	movwf	(??_isr+0)+0
   662  002A  0878               	movf	(??_isr+0)+0,w
   663  002B  00F3               	movwf	(isr@dcd)
   664  002C  282D               	goto	i1l1642
   665                           	line	61
   666                           	
   667  002D                     i1l628:	
   668                           	line	62
   669                           	
   670  002D                     i1l1642:	
   671                           ;Main.c: 61: }
   672                           ;Main.c: 62: last = 1;
   673  002D  14FD               	bsf	(isr@last/8),(isr@last)&7
   674                           	line	63
   675                           ;Main.c: 63: }
   676  002E  28A3               	goto	i1l643
   677                           	line	64
   678                           	
   679  002F                     i1l627:	
   680                           	
   681  002F                     i1l1644:	
   682                           ;Main.c: 64: else if (count > 49)
   683  002F  3032               	movlw	(032h)
   684  0030  0272               	subwf	(isr@count),w
   685  0031  1C03               	skipc
   686  0032  2834               	goto	u4_21
   687  0033  2835               	goto	u4_20
   688  0034                     u4_21:
   689  0034  28A3               	goto	i1l643
   690  0035                     u4_20:
   691                           	line	66
   692                           	
   693  0035                     i1l1646:	
   694                           ;Main.c: 65: {
   695                           ;Main.c: 66: if (last == 1)
   696  0035  1CFD               	btfss	(isr@last/8),(isr@last)&7
   697  0036  2838               	goto	u5_21
   698  0037  2839               	goto	u5_20
   699  0038                     u5_21:
   700  0038  28A3               	goto	i1l643
   701  0039                     u5_20:
   702                           	line	68
   703                           	
   704  0039                     i1l1648:	
   705                           ;Main.c: 67: {
   706                           ;Main.c: 68: rxtoggled = 1;
   707  0039  157D               	bsf	(isr@rxtoggled/8),(isr@rxtoggled)&7
   708                           	line	69
   709                           	
   710  003A                     i1l1650:	
   711                           ;Main.c: 69: dcd = count;
   712  003A  0872               	movf	(isr@count),w
   713  003B  00F8               	movwf	(??_isr+0)+0
   714  003C  0878               	movf	(??_isr+0)+0,w
   715  003D  00F3               	movwf	(isr@dcd)
   716  003E  28A3               	goto	i1l643
   717                           	line	70
   718                           	
   719  003F                     i1l631:	
   720  003F  28A3               	goto	i1l643
   721                           	line	71
   722                           	
   723  0040                     i1l630:	
   724  0040  28A3               	goto	i1l643
   725                           	line	72
   726                           	
   727  0041                     i1l629:	
   728                           ;Main.c: 70: }
   729                           ;Main.c: 71: }
   730                           ;Main.c: 72: }
   731  0041  28A3               	goto	i1l643
   732                           	line	73
   733                           	
   734  0042                     i1l626:	
   735                           ;Main.c: 73: else if (TMR2IF)
   736  0042  1C8C               	btfss	(97/8),(97)&7
   737  0043  2845               	goto	u6_21
   738  0044  2846               	goto	u6_20
   739  0045                     u6_21:
   740  0045  28A3               	goto	i1l643
   741  0046                     u6_20:
   742                           	line	75
   743                           	
   744  0046                     i1l1652:	
   745                           ;Main.c: 74: {
   746                           ;Main.c: 75: TMR2 = 126;
   747  0046  307E               	movlw	(07Eh)
   748  0047  0091               	movwf	(17)	;volatile
   749                           	line	76
   750                           	
   751  0048                     i1l1654:	
   752                           ;Main.c: 76: TMR2IF = 0;
   753  0048  108C               	bcf	(97/8),(97)&7
   754                           	line	77
   755                           ;Main.c: 77: if (dcd)
   756  0049  0873               	movf	(isr@dcd),w
   757  004A  1D03               	skipz
   758  004B  284D               	goto	u7_20
   759  004C  289E               	goto	i1l634
   760  004D                     u7_20:
   761                           	line	79
   762                           	
   763  004D                     i1l1656:	
   764                           ;Main.c: 78: {
   765                           ;Main.c: 79: dcd--;
   766  004D  3001               	movlw	low(01h)
   767  004E  02F3               	subwf	(isr@dcd),f
   768                           	line	80
   769                           	
   770  004F                     i1l1658:	
   771                           ;Main.c: 80: busy = 1;
   772  004F  147D               	bsf	(_busy/8),(_busy)&7
   773                           	line	81
   774                           	
   775  0050                     i1l1660:	
   776                           ;Main.c: 81: if (rxtoggled)
   777  0050  1D7D               	btfss	(isr@rxtoggled/8),(isr@rxtoggled)&7
   778  0051  2853               	goto	u8_21
   779  0052  2854               	goto	u8_20
   780  0053                     u8_21:
   781  0053  2869               	goto	i1l1676
   782  0054                     u8_20:
   783                           	line	83
   784                           	
   785  0054                     i1l1662:	
   786                           ;Main.c: 82: {
   787                           ;Main.c: 83: if (ones_count != 5)
   788  0054  0876               	movf	(isr@ones_count),w
   789  0055  3A05               	xorlw	05h
   790  0056  1903               	skipnz
   791  0057  2859               	goto	u9_21
   792  0058  285A               	goto	u9_20
   793  0059                     u9_21:
   794  0059  2861               	goto	i1l1668
   795  005A                     u9_20:
   796                           	line	85
   797                           	
   798  005A                     i1l1664:	
   799                           ;Main.c: 84: {
   800                           ;Main.c: 85: bit_count++;
   801  005A  3001               	movlw	(01h)
   802  005B  00F8               	movwf	(??_isr+0)+0
   803  005C  0878               	movf	(??_isr+0)+0,w
   804  005D  07F1               	addwf	(isr@bit_count),f
   805                           	line	86
   806                           	
   807  005E                     i1l1666:	
   808                           ;Main.c: 86: last8bits >>= 1;
   809  005E  1003               	clrc
   810  005F  0CF4               	rrf	(isr@last8bits),f
   811                           
   812  0060  2861               	goto	i1l1668
   813                           	line	87
   814                           	
   815  0061                     i1l636:	
   816                           	line	89
   817                           	
   818  0061                     i1l1668:	
   819                           ;Main.c: 87: }
   820                           ;Main.c: 89: rxtoggled = 0;
   821  0061  117D               	bcf	(isr@rxtoggled/8),(isr@rxtoggled)&7
   822                           	line	90
   823                           	
   824  0062                     i1l1670:	
   825                           ;Main.c: 90: ones_count = 0;
   826  0062  01F6               	clrf	(isr@ones_count)
   827                           	line	91
   828                           	
   829  0063                     i1l1672:	
   830                           ;Main.c: 91: sample_clock = 0;
   831  0063  01F7               	clrf	(isr@sample_clock)
   832                           	line	92
   833                           	
   834  0064                     i1l1674:	
   835                           ;Main.c: 92: next_sample = 12;
   836  0064  300C               	movlw	(0Ch)
   837  0065  00F8               	movwf	(??_isr+0)+0
   838  0066  0878               	movf	(??_isr+0)+0,w
   839  0067  00F5               	movwf	(isr@next_sample)
   840                           	line	93
   841                           ;Main.c: 93: }
   842  0068  2885               	goto	i1l1688
   843                           	line	94
   844                           	
   845  0069                     i1l635:	
   846                           	line	96
   847                           	
   848  0069                     i1l1676:	
   849                           ;Main.c: 94: else
   850                           ;Main.c: 95: {
   851                           ;Main.c: 96: if (++sample_clock == next_sample)
   852  0069  3001               	movlw	(01h)
   853  006A  00F8               	movwf	(??_isr+0)+0
   854  006B  0878               	movf	(??_isr+0)+0,w
   855  006C  07F7               	addwf	(isr@sample_clock),f
   856  006D  0877               	movf	((isr@sample_clock)),w
   857  006E  0675               	xorwf	(isr@next_sample),w
   858  006F  1D03               	skipz
   859  0070  2872               	goto	u10_21
   860  0071  2873               	goto	u10_20
   861  0072                     u10_21:
   862  0072  2885               	goto	i1l1688
   863  0073                     u10_20:
   864                           	line	98
   865                           	
   866  0073                     i1l1678:	
   867                           ;Main.c: 97: {
   868                           ;Main.c: 98: ones_count++;
   869  0073  3001               	movlw	(01h)
   870  0074  00F8               	movwf	(??_isr+0)+0
   871  0075  0878               	movf	(??_isr+0)+0,w
   872  0076  07F6               	addwf	(isr@ones_count),f
   873                           	line	99
   874                           ;Main.c: 99: bit_count++;
   875  0077  3001               	movlw	(01h)
   876  0078  00F8               	movwf	(??_isr+0)+0
   877  0079  0878               	movf	(??_isr+0)+0,w
   878  007A  07F1               	addwf	(isr@bit_count),f
   879                           	line	100
   880                           	
   881  007B                     i1l1680:	
   882                           ;Main.c: 100: last8bits >> = 1;
   883  007B  1003               	clrc
   884  007C  0CF4               	rrf	(isr@last8bits),f
   885                           
   886                           	line	101
   887                           	
   888  007D                     i1l1682:	
   889                           ;Main.c: 101: last8bits |= 0x80;
   890  007D  17F4               	bsf	(isr@last8bits)+(7/8),(7)&7
   891                           	line	102
   892                           	
   893  007E                     i1l1684:	
   894                           ;Main.c: 102: sample_clock = 0;
   895  007E  01F7               	clrf	(isr@sample_clock)
   896                           	line	103
   897                           	
   898  007F                     i1l1686:	
   899                           ;Main.c: 103: next_sample = 8;
   900  007F  3008               	movlw	(08h)
   901  0080  00F8               	movwf	(??_isr+0)+0
   902  0081  0878               	movf	(??_isr+0)+0,w
   903  0082  00F5               	movwf	(isr@next_sample)
   904  0083  2885               	goto	i1l1688
   905                           	line	104
   906                           	
   907  0084                     i1l638:	
   908  0084  2885               	goto	i1l1688
   909                           	line	105
   910                           	
   911  0085                     i1l637:	
   912                           	line	106
   913                           	
   914  0085                     i1l1688:	
   915                           ;Main.c: 104: }
   916                           ;Main.c: 105: }
   917                           ;Main.c: 106: if (last8bits == 0x7E)
   918  0085  0874               	movf	(isr@last8bits),w
   919  0086  3A7E               	xorlw	07Eh
   920  0087  1D03               	skipz
   921  0088  288A               	goto	u11_21
   922  0089  288B               	goto	u11_20
   923  008A                     u11_21:
   924  008A  2892               	goto	i1l1696
   925  008B                     u11_20:
   926                           	line	108
   927                           	
   928  008B                     i1l1690:	
   929                           ;Main.c: 107: {
   930                           ;Main.c: 108: bit_count = 0;
   931  008B  01F1               	clrf	(isr@bit_count)
   932                           	line	109
   933                           	
   934  008C                     i1l1692:	
   935                           ;Main.c: 109: TXREG = 0x1B;
   936  008C  301B               	movlw	(01Bh)
   937  008D  0099               	movwf	(25)	;volatile
   938                           	line	110
   939                           ;Main.c: 110: TXREG = 0x7B;
   940  008E  307B               	movlw	(07Bh)
   941  008F  0099               	movwf	(25)	;volatile
   942                           	line	111
   943                           	
   944  0090                     i1l1694:	
   945                           ;Main.c: 111: RA4 = 1;
   946  0090  1605               	bsf	(44/8),(44)&7
   947                           	line	112
   948                           ;Main.c: 112: }
   949  0091  28A3               	goto	i1l643
   950                           	line	113
   951                           	
   952  0092                     i1l639:	
   953                           	line	115
   954                           	
   955  0092                     i1l1696:	
   956                           ;Main.c: 113: else
   957                           ;Main.c: 114: {
   958                           ;Main.c: 115: if (bit_count == 8)
   959  0092  0871               	movf	(isr@bit_count),w
   960  0093  3A08               	xorlw	08h
   961  0094  1D03               	skipz
   962  0095  2897               	goto	u12_21
   963  0096  2898               	goto	u12_20
   964  0097                     u12_21:
   965  0097  28A3               	goto	i1l643
   966  0098                     u12_20:
   967                           	line	117
   968                           	
   969  0098                     i1l1698:	
   970                           ;Main.c: 116: {
   971                           ;Main.c: 117: bit_count = 0;
   972  0098  01F1               	clrf	(isr@bit_count)
   973                           	line	118
   974                           	
   975  0099                     i1l1700:	
   976                           ;Main.c: 118: TXREG = 0x7B;
   977  0099  307B               	movlw	(07Bh)
   978  009A  0099               	movwf	(25)	;volatile
   979  009B  28A3               	goto	i1l643
   980                           	line	119
   981                           	
   982  009C                     i1l641:	
   983  009C  28A3               	goto	i1l643
   984                           	line	120
   985                           	
   986  009D                     i1l640:	
   987                           	line	121
   988                           ;Main.c: 119: }
   989                           ;Main.c: 120: }
   990                           ;Main.c: 121: }
   991  009D  28A3               	goto	i1l643
   992                           	line	122
   993                           	
   994  009E                     i1l634:	
   995                           	line	124
   996                           ;Main.c: 122: else
   997                           ;Main.c: 123: {
   998                           ;Main.c: 124: busy = 0;
   999  009E  107D               	bcf	(_busy/8),(_busy)&7
  1000                           	line	125
  1001                           ;Main.c: 125: RA4 = 0;
  1002  009F  1205               	bcf	(44/8),(44)&7
  1003  00A0  28A3               	goto	i1l643
  1004                           	line	126
  1005                           	
  1006  00A1                     i1l642:	
  1007  00A1  28A3               	goto	i1l643
  1008                           	line	127
  1009                           	
  1010  00A2                     i1l633:	
  1011  00A2  28A3               	goto	i1l643
  1012                           	line	128
  1013                           	
  1014  00A3                     i1l632:	
  1015                           	
  1016  00A3                     i1l643:	
  1017  00A3  087C               	movf	(??_isr+4),w
  1018  00A4  00FF               	movwf	btemp+1
  1019  00A5  087B               	movf	(??_isr+3),w
  1020  00A6  008A               	movwf	pclath
  1021  00A7  087A               	movf	(??_isr+2),w
  1022  00A8  0084               	movwf	fsr0
  1023  00A9  0E79               	swapf	(??_isr+1)^0FFFFFF80h,w
  1024  00AA  0083               	movwf	status
  1025  00AB  0EFE               	swapf	saved_w,f
  1026  00AC  0E7E               	swapf	saved_w,w
  1027  00AD  0009               	retfie
  1028                           	opt stack 0
  1029                           GLOBAL	__end_of_isr
  1030  00AE                     	__end_of_isr:
  1031 ;; =============== function _isr ends ============
  1032                           
  1033                           	signat	_isr,88
  1034                           psect	text79,local,class=CODE,delta=2
  1035                           global __ptext79
  1036  0000                     __ptext79:
  1037                           	global	btemp
  1038  007E                     	btemp set 07Eh
  1039                           
  1040                           	DABS	1,126,2	;btemp
  1041                           	global	wtemp0
  1042  007E                     	wtemp0 set btemp


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Thu Apr 19 09:09:32 2012

                    _RD 0C60                      _WR 0C61                     l605 00D8                     l646 00E9  
                   l647 00E9                     l648 00EA                     l649 00EA                     _GIE 005F  
                   _RA4 002C                     _isr 0013                     fsr0 0004                    l1620 00AE  
                  l1622 00C8                    l1624 00CB                    l2560 00E5                    ?_isr 0078  
                  _PIE1 008C                    _PIE2 008D                    _RBIF 0058                    _TMR0 0001  
                  _TMR2 0011                    _WREN 0C62                    u1_20 0017                    u1_21 0016  
                  u2_20 0023                    u2_21 0022                    u3_20 0027                    u3_21 0026  
                  u4_20 0035                    u4_21 0034                    u5_20 0039                    u5_21 0038  
                  u6_20 0046                    u6_21 0045                    u7_20 004D                    u8_20 0054  
                  u8_21 0053                    u9_20 005A                    u9_21 0059                    _main 00E5  
                  _byte 0070                    _busy 03E8                    btemp 007E                    start 0011  
         _Init_Hardware 00AE                   ??_isr 0078                   ?_main 0078                   _EEADR 010D  
                 _CARRY 0018                   _CMCON 009C                   _ANSEL 009B                   _T1CON 0010  
                 _T2CON 0012                   i1l630 0040                   i1l631 003F                   i1l632 00A3  
                 i1l640 009D                   i1l633 00A2                   i1l641 009C                   i1l642 00A1  
                 i1l634 009E                   i1l626 0042                   i1l635 0069                   i1l627 002F  
                 i1l643 00A3                   i1l636 0061                   i1l628 002D                   i1l637 0085  
                 i1l629 0041                   i1l638 0084                   i1l639 0092                   u10_20 0073  
                 u10_21 0072                   u11_20 008B                   u11_21 008A                   _RCSTA 0018  
                 u12_20 0098                   u12_21 0097                   _SPBRG 0099                   _PORTA 0005  
                 _PORTB 0006                   _TRISA 0085                   _TRISB 0086                   _TXREG 0019  
                 _TXSTA 0098          __pbitbssCOMMON 03E8                   pclath 000A                   status 0003  
                 wtemp0 007E          ?_Init_Hardware 0078            __end_of_main 00EC                  ??_main 007D  
       isr@sample_clock 0077                  _EEDATA 010C                  _EECON1 018C                  _EECON2 018D  
                i1l1700 0099                  i1l1630 001B                  i1l1640 0028                  i1l1632 001C  
                i1l1650 003A                  i1l1642 002D                  i1l1634 001D                  i1l1626 0013  
                i1l1660 0050                  i1l1652 0046                  i1l1636 0023                  i1l1644 002F  
                i1l1628 0017                  i1l1670 0062                  i1l1662 0054                  i1l1654 0048  
                i1l1646 0035                  i1l1638 0027                  i1l1680 007B                  i1l1672 0063  
                i1l1664 005A                  i1l1656 004D                  i1l1648 0039                  i1l1690 008B  
                i1l1682 007D                  i1l1674 0064                  i1l1666 005E                  i1l1658 004F  
                i1l1692 008C                  i1l1684 007E                  i1l1668 0061                  i1l1676 0069  
                i1l1694 0090                  i1l1686 007F                  i1l1678 0073                  i1l1696 0092  
                i1l1688 0085                  i1l1698 0098                  _INTCON 000B                  _TMR2IF 0061  
                isr@dcd 0073                  saved_w 007E         ??_Init_Hardware 007D          __pcstackCOMMON 0078  
            __pmaintext 00E5            isr@bit_count 0071              __pintentry 0004            isr@last8bits 0074  
          __size_of_isr 009B    end_of_initialization 00E2            isr@rxtoggled 03EA                 isr@last 03E9  
   start_initialization 00D9             __end_of_isr 00AE          isr@next_sample 0075   __end_of_Init_Hardware 00D9  
           __pbssCOMMON 0070       interrupt_function 0004           isr@ones_count 0076                __ptext76 0000  
              __ptext77 00AE                __ptext78 0013                __ptext79 0000           __size_of_main 0007  
              isr@count 0072                intlevel1 0000              _OPTION_REG 0081  __size_of_Init_Hardware 002B  
